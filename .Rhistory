"Paschim |Paschimi |Pashchim |Pashchimi " = "West ",
"Capf Personnel" = "Bishnupur",
"Railway Quarantine" = "Chennai"
)) %>% str_replace_all(c(
" And " = " and ",
"Y.s.r" = "Y.S.R",
"S.a.s" = "S.A.S",
"S.p.s" = "S.P.S"
))
data$Detected.District[data$Detected.District == "Airport Quarantine" & data$Detected.State == "Tamil Nadu"] = "Chennai"
data$Detected.City <- data$Detected.City %>% str_to_title() %>% str_replace_all(c(
"Khargone" = "Khargon",
"Jogulamba Gadwal" = "Gadwal",
"Balasore" = "Baleshwar"
))
data$Detected.City[data$Detected.District == "State Pool"] = "Bhuwaneshwar"
data$Detected.District[data$Detected.District == "State Pool"] = "Khordha"
rm(list = c(gp, gp0, gp1, word, maxdist, newdist, uu))
data$Detected.State[data$Detected.State %in% c('', "State Unassigned")] = NA
data$Detected.City <- as.factor(data$Detected.City)
data$Detected.District <- as.factor(data$Detected.District)
data$Detected.State <- as.factor(data$Detected.State)
data$Current.Status <- as.factor(data$Current.Status)
data$Type.of.transmission[is.na(data$Type.of.transmission)] = ''
data$Type.of.transmission[data$Type.of.transmission == ''] = "Unknown"
data$Type.of.transmission <- data$Type.of.transmission %>% str_replace_all("TBD", "Unknown")
data$Type.of.transmission <- as.factor(data$Type.of.transmission)
data$month <- as.factor(format(data$Date.Announced, "%m"))
save(data, file = "C:/Users/manja/Downloads/cleaneddata.Rdata")
data1 = data %>% filter(!is.na(Detected.District) & str_length(Detected.District) > 0 & Num.Cases == 1) %>% mutate(list7 = list1 + list2 + list3 + list6 + list7>= 1) %>% as.data.frame
colds = c("Detected.State", "Detected.District", "Detected.City", "Current.Status", "Num.Cases", "days", "list4", "list7")
d1 <-  aggregate(cbind(list4, list7)~Detected.State+Current.Status, data = data1[,colds], FUN = sum)
d2 <-  aggregate(cbind(list4, list7)~Detected.District+Current.Status, data = data1[,colds], FUN = sum)
datat = merge(data, indiatown, by.x = "Detected.City", by.y = "name", suffix = c('', '.city'), all.x = TRUE)
datad = merge(indiadistrict, d2,
by.y = "Detected.District", by.x = "DISTRICT", all.x = TRUE) %>% filter(!is.na(Current.Status))
datas = do.call("rbind", lapply(unique(d2$Current.Status), function(status) {mdata = merge(indiastate, d1 %>% filter(Current.Status == status),
by.x = "ST_NM", by.y = "Detected.State", all.x = TRUE);
mdata$Current.Status = status;mdata}))
g1 = ggplot(datad) + geom_sf(aes(fill= list4), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) + labs(fill = "count")
g2 = ggplot(datad) + geom_sf(aes(fill= list7), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())
g3 = ggplot(datas %>% filter(Current.Status != '')) + geom_sf(aes(fill= list4), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) + labs(fill = "count")
g4 = ggplot(datas %>% filter(Current.Status != '')) + geom_sf(aes(fill= list7), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())
g5 = ggpubr::ggarrange(g1 + ggtitle("official") + scale_fill_continuous(trans = modulus_trans(0), breaks = c(0, 5, 10, 20, 50, 100, 1000, 5000, 20000)),
g2 + ggtitle("press and others") + scale_fill_continuous(trans = modulus_trans(0)),
common.legend = TRUE)
g6 = ggpubr::ggarrange(g3 + ggtitle("official") + facet_wrap(~Current.Status, nrow = 1) + scale_fill_continuous(trans = modulus_trans(0), breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g4 + ggtitle("press and others") + facet_wrap(~Current.Status, nrow = 1) + scale_fill_continuous(trans = modulus_trans(0)),
ncol = 1, common.legend = TRUE)
g5
g6
source("C:/Users/manja/Downloads/wikitable.R")
data$postelection = data$Date.Announced > "2021-04-12"
data = merge(data, towncoord, by.x = "Detected.City", by.y = "tname", suffix = c('', '.city'), all.x = TRUE)
data = merge(data, distcoord, by.x = c("Detected.District", "Detected.State"), by.y = c("DISTRICT", "ST_NM"), suffix = c('', '.district'), all.x = TRUE)
data = merge(data, statecoord, by.x = "Detected.State", by.y = "ST_NM", suffix = c('', '.state'), all.x = TRUE)
data$X[is.na(data$X)] = data$X.district[is.na(data$X)]
data$X[is.na(data$X)] = data$X.state[is.na(data$X)]
data$Y[is.na(data$Y)] = data$Y.district[is.na(data$Y)]
data$Y[is.na(data$Y)] = data$Y.state[is.na(data$Y)]
#data$areaa = data$area
distcoordavg = aggregate(Area ~ ST_NM, data = distcoord, FUN = mean)
for(state in distcoordavg$ST_NM){
#print(state)
data$Area[data$Detected.State == state & is.na(data$Area)] = distcoordavg$Area[distcoordavg$ST_NM == state]
data$Population[data$Detected.State == state & is.na(data$Population)] = statecoord$Population[statecoord$ST_NM == state]
data$Density[data$Detected.State == state & is.na(data$Density)] = statecoord$Density[statecoord$ST_NM == state]
}
data2 <- data[data$Num.Cases == 1 & !is.na(data$Num.Cases), c("list4", "list2", "list1", "list3", "list6", "Age.Bracket", "Gender", "Nationality", "days", "X", "Y", "Area", "Population", "Density", "Tot.Population", "area", "Num.Cases", "Current.Status", "Type.of.transmission", "Detected.State")]
data2$Gender <- data2$Gender %>% str_remove_all(" |,|emale")
data2$Gender[is.na(data2$Gender)] = "Non-Binary"
data2$Gender = as.factor(data2$Gender)
data2$list2 = (data2$list1 + data2$list2 + data2$list3 + data2$list6 >= 1)
data2$agena = 1
data2$agena[!is.na(data2$Age.Bracket)] = 0
data2$Age.Bracket[data2$agena == 1] = 0
rm(list = c("data", "distcoordavg"))
data3 = data2[,!(names(data2) %in% c("list1", "list3", "Nationality", "Detected.State", "Num.Cases"))]
data3 = data3 %>% mutate(Area = log(Area), Population = log(Population), Density = log(Density))
datalong = reshape2::melt(reformat(data3, 1:2) %>% select_if(is.numeric), id.vars = c("list2", "list4"))
datalong = datalong %>% mutate(list11 = list2*list4, list10 = list2*(1-list4), list01 = (1-list2)*list4) %>% reshape2::melt(id.vars = c("list2", "list4", "variable", "value"))
colnames(datalong) = c("list2", "list4", "variable", "value", "caphist", "extra")
datalong = datalong[datalong$extra == 1,]
ggplot(datalong, aes(y = value, x = caphist, color = caphist)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free")
pdf("C:/Users/manja/Downloads/indiacovidstate.pdf", width = 9, height = 6)
g6
dev.off()
g5
pdf("C:/Users/manja/Downloads/indiacoviddistrict.pdf", width = 9, height = 4.5)
g5
dev.off()
phat <- psinhat(List_matrix = data3, K = 2, funcname = c("ranger", "gam"), nfolds = 5, eps = 0.008, iter = 10000, twolist = FALSE, filterrows = FALSE)
phat$psi
#save(phat, file = "C:/Users/manja/Downloads/covid5folds.Rdata")
nrow(data3)/phat$psi
library(plyr)
library(dplyr)
library(stringr)
load("C:/Users/manja/Downloads/cleaneddata.Rdata")
head(data)
############################################################3
library(scales) #for trans_new
source("C:/Users/manja/Downloads/indiadistricttownstate.R")
options(scipen = 5)
data1 = data %>% filter(!is.na(Detected.District) & str_length(Detected.District) > 0 & !is.na(Num.Cases) & Num.Cases >= -1e20) %>% mutate(list7 = list1 + list2 + list3 + list6>= 1) %>% as.data.frame
colds = c("Detected.State", "Detected.District", "Detected.City", "Current.Status", "Num.Cases", "days", "list4", "list7")
source("C:/Users/manja/Downloads/indiadistricttownstate.R")
d1 <-  aggregate(cbind(list4 = list4*Num.Cases, list7 = list7*Num.Cases)~Detected.State+Current.Status, data = data1[,colds], FUN = sum)
d2 <- aggregate(cbind(list4 = list4*Num.Cases, list7 = list7*Num.Cases)~Detected.District, data = data1[,colds], FUN = sum)
d3 <-  aggregate(cbind(list4 = list4*Num.Cases, list7 = list7*Num.Cases)~Detected.State, data = data1[,colds], FUN = sum)
#datat = merge(data, indiatown, by.x = "Detected.City", by.y = "name", suffix = c('', '.city'), all.x = TRUE)
datad = merge(indiadistrict, d2,
by.y = "Detected.District", by.x = "DISTRICT", all.x = TRUE)# %>% filter(!is.na(Current.Status))
datas = do.call("rbind", lapply(unique(d1$Current.Status), function(status) {mdata = merge(indiastate, d1 %>% filter(Current.Status == status),
by.x = "ST_NM", by.y = "Detected.State", all.x = TRUE);
mdata$Current.Status = status;mdata}))
datas3 = merge(indiastate, d3,
by.y = "Detected.State", by.x = "ST_NM", all.x = TRUE)# %>% filter(!is.na(Current.Status))
g1 = ggplot(datad) + geom_sf(aes(fill= list4), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + labs(fill = "count")
g2 = ggplot(datad) + geom_sf(aes(fill= list7), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
g3 = ggplot(datas %>% filter(Current.Status != '')) + geom_sf(aes(fill= list4), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + labs(fill = "count")
g4 = ggplot(datas %>% filter(Current.Status != '')) + geom_sf(aes(fill= list7), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
g33 = ggplot(datas3) + geom_sf(aes(fill= list4), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + labs(fill = "count")
g43 = ggplot(datas3) + geom_sf(aes(fill= list7), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
transval = 0.08
my_breaks = round(sapply(seq(modulus_trans(transval)$transform(min(c(datad$list4, datad$list7), na.rm = TRUE)),
modulus_trans(transval)$transform(max(c(datad$list4, datad$list7), na.rm = TRUE)), length.out = 10),
modulus_trans(transval)$inverse))
g5 = ggpubr::ggarrange(g1 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = my_breaks),
g2 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g5
transval = 0.6
my_breaks = round(sapply(seq(modulus_trans(transval)$transform(min(c(datas$list4, datas$list7), na.rm = TRUE)),
modulus_trans(transval)$transform(max(c(datas$list4, datas$list7), na.rm = TRUE)), length.out = 10),
modulus_trans(transval)$inverse))
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
transval = 0.6
my_breaks = c(0,round(sapply(seq(modulus_trans(transval)$transform(min(c(datas$list4, datas$list7), na.rm = TRUE)),
modulus_trans(transval)$transform(max(c(datas$list4, datas$list7), na.rm = TRUE)), length.out = 10),
modulus_trans(transval)$inverse)))
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
my_breaks
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 300000, 500000, 900000, 1300000, 2000000, 2500000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 300000, 500000, 900000, 1300000, 2000000, 3000000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 300000, 500000, 900000, 1300000, 2000000, 2800000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 100000, 500000, 900000, 1500000, 2000000, 2800000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 200000, 500000, 900000, 1500000, 2000000, 2800000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 250000, 500000, 900000, 1500000, 2000000, 2800000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
png("C:/Users/manja/Downloads/indiacovidstate_allcases.png", width = 9, height = 6)
g6
dev.off()
png("C:/Users/manja/Downloads/indiacovidstate_allcases.png")#, width = 9, height = 6)
g6
dev.off()
?png
png("C:/Users/manja/Downloads/indiacovidstate_allcases.png", width = 90, height = 60)
g6
dev.off()
png("C:/Users/manja/Downloads/indiacovidstate_allcases.png", width = 900, height = 600)
g6
dev.off()
png("C:/Users/manja/Downloads/indiacovidstate_allcases.png", width = 900*0.8, height = 600*0.8)
g6
dev.off()
g33 = ggplot(datas3) + geom_sf(aes(fill= list4), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + labs(fill = "Documented victims")
g43 = ggplot(datas3) + geom_sf(aes(fill= list7), lwd = NA) + theme(legend.key.width = unit(3.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 250000, 500000, 900000, 1500000, 2000000, 2800000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
g6
png("C:/Users/manja/Downloads/indiacovidstate_allcases.png", width = 900*0.6, height = 600*0.6)
g6
dev.off()
g6 = ggpubr::ggarrange(g33 + ggtitle("Official sources") + scale_fill_continuous(trans = modulus_trans(transval), breaks = c(0,80000, 250000, 500000, 900000, 1500000, 2100000, 2800000)),#my_breaks),# breaks = c(0, 5, 10, 20, 50, 100, 500, 5000, 25000)),
g43 + ggtitle("News and other sources") + scale_fill_continuous(trans = modulus_trans(transval)),
common.legend = TRUE)
png("C:/Users/manja/Downloads/indiacovidstate_allcases.png", width = 900*0.75, height = 600*0.75)
g6
dev.off()
devtools::load_all("C:/Users/manja/OneDrive/Documents/drpop")
oldy = FALSE
if(oldy){
expit = function(x){exp(x)/(1 + exp(x))}
x = sort(rnorm(2000, 2, 1))
p1 <- expit(x)
p2 <- expit(2*x)
y1 <- sapply(p1, function(pi) {sample(c(0, 1), 1, prob = c(1 - pi, pi))})
y2 <- sapply(p2, function(pi) {sample(c(0, 1), 1, prob = c(1 - pi, pi))})
listdata = data.frame(L1 = y1, L2 = y2, x1 = x)
listdata = listdata[y1+y2>0,]
}else{
set.seed(1234)
simul = simuldata(n = 2000, l = 1, ep = -1)
simul$psi
listdata = simul$List_matrix
}
if(FALSE){
split = sort(sample(1:nrow(listdata), nrow(listdata)/2))
####### fitting the models to obtain q1, q2 and q12
qhat1 = qhat_logit(List.train = listdata[split,],
List.test = listdata[-split,], K = 2, i = 1, j = 2)
qhat2 = qhat_gam(List.train = listdata[split,],
List.test = listdata[-split,], K = 2, i = 1, j = 2)
qhat3 = qhat_sl(List.train = listdata[split,],
List.test = listdata[-split,], K = 2, i = 1, j = 2, sl.lib = c("SL.gam", "SL.ranger", "SL.glmnet"))
qhat4 = qhat_mlogit(List.train = listdata[split,],
List.test = listdata[-split,], K = 2, i = 1, j = 2, eps = 0.005)
result <- data.frame(listdata[-split,],# p1 = p1[-split], p2 = p2[-split],
logit.q1 = qhat1$q1, logit.q2 = qhat1$q2, logit.q12 = qhat1$q12,
mlogit.q1 = qhat4$q1, mlogit.q2 = qhat4$q2, mlogit.q12 = qhat4$q12,
gam.q1 = qhat2$q1, gam.q2 = qhat2$q2, gam.q12 = qhat2$q12,
sl.q1 = qhat3$q1, sl.q2 = qhat3$q2, sl.q12 = qhat3$q12)
colnames(result)[1:3] = c("L1", "L2", "x1")
result = reshape2::melt(result, id.vars = c("L1", "L2", "x1"), value.name = "q")
library(dplyr)
library(tidyr)
library(ggplot2)
result = result %>% separate(variable, c("model", "parameter"))
result$parameter = factor(result$parameter, levels = c("q1" = "q1", "q2" = "q2", "q12" = "q12"))
result$model = factor(result$model, levels = c("logit" = "logit", "mlogit" = "mlogit", "gam" = "gam", "sl" = "sl"))
result$y = result$L1
result$y[result$parameter == "q2"] = result$L2[result$parameter == "q2"]
result$y[result$parameter == "q12"] = (result$L1*result$L2)[result$parameter == "q12"]
ggplot(result %>% filter(model != "slk"), aes(x = x1, y = q, color = model)) +
theme_bw() +
theme(axis.title.y = element_text(angle=0)) +
facet_wrap(~parameter, ncol = 3) +
geom_point(aes(y = y), color = "black", size = 0.5) +
geom_line(aes(linetype = model), size = 1)
}
qq = qhateval(List_matrix = listdata, funcname = c("logit", "gam", "mlogit", "sl", "rangerlogit"), nfolds = 2)
result <- data.frame(listdata, do.call("cbind", qq))
colnames(result) <- stringr::str_remove_all(colnames(result), "mat")
colnames(result)[1:3] = c("L1", "L2", "x1")
result = reshape2::melt(result, id.vars = c("L1", "L2", "x1", "idfold"), value.name = "q")
library(dplyr)
library(tidyr)
library(ggplot2)
result = result %>% separate(variable, c("parameter", "model"))
result$parameter = factor(result$parameter, levels = c("q1" = "q1", "q2" = "q2", "q12" = "q12"))
result$model = factor(result$model, levels = c("logit" = "logit", "mlogit" = "mlogit", "gam" = "gam", "sl" = "sl"))
result$y = result$L1
result$y[result$parameter == "q2"] = result$L2[result$parameter == "q2"]
result$y[result$parameter == "q12"] = (result$L1*result$L2)[result$parameter == "q12"]
ggplot(result %>% filter(model != "slk" & idfold == 2), aes(x = x1, y = q, color = model)) +
theme_bw() +
theme(axis.title.y = element_text(angle=0)) +
facet_wrap(~parameter, ncol = 3, scales = "free") +
geom_point(aes(y = y), color = "black", size = 0.5) +
#geom_smooth() +
geom_line(aes(linetype = model), size = 1)
result <- data.frame(listdata, do.call("cbind", qq))
colnames(result) <- stringr::str_remove_all(colnames(result), "mat")
colnames(result)[1:3] = c("L1", "L2", "x1")
result = reshape2::melt(result, id.vars = c("L1", "L2", "x1", "idfold"), value.name = "q")
library(dplyr)
library(tidyr)
library(ggplot2)
result = result %>% separate(variable, c("parameter", "model"))
result$parameter = factor(result$parameter, levels = c("q1" = "q1", "q2" = "q2", "q12" = "q12"))
result$model = factor(result$model, levels = c("logit" = "logit", "mlogit" = "mlogit", "gam" = "gam", "sl" = "sl", "rangerlogit" = "rangerlogit"))
result$y = result$L1
result$y[result$parameter == "q2"] = result$L2[result$parameter == "q2"]
result$y[result$parameter == "q12"] = (result$L1*result$L2)[result$parameter == "q12"]
ggplot(result %>% filter(model != "slk" & idfold == 2), aes(x = x1, y = q, color = model)) +
theme_bw() +
theme(axis.title.y = element_text(angle=0)) +
facet_wrap(~parameter, ncol = 3, scales = "free") +
geom_point(aes(y = y), color = "black", size = 0.5) +
#geom_smooth() +
geom_line(aes(linetype = model), size = 1)
ggplot(result %>% filter(model != "slk" & idfold == 1), aes(x = x1, y = q, color = model)) +
theme_bw() +
theme(axis.title.y = element_text(angle=0)) +
facet_wrap(~parameter, ncol = 3, scales = "free") +
geom_point(aes(y = y), color = "black", size = 0.5) +
#geom_smooth() +
geom_line(aes(linetype = model), size = 1)
pdf("C:/Users/manja/Downloads/qhat_plot.pdf", width = 9.5, height = 3)
ggplot(result %>% filter(model != "slk" & idfold == 1), aes(x = x1, y = q, color = model)) +
theme_bw() +
ylab(NULL) +
theme(axis.title.y = element_text(angle=0)) +
facet_wrap(~parameter, ncol = 3, scales = "free") +
geom_point(aes(y = y), color = "black", size = 0.5) +
#geom_smooth() +
geom_line(aes(linetype = model), size = 1)
dev.off()
lapply(qq, function(x) head(x,3))
set.seed(1234)
funcname = c("rangerlogit", "logit", "ranger", "gam")
result = numeric(0)
n = 5000
for(s in 1:100){
print(s)
ld = simuldata2(n = n, l = 6, ep = -6)
listdata = ld$List_matrix
listdata2 = ld$List_matrix_xstar
p1 = psinhat(listdata, funcname = funcname, nfolds = 2)
p2 = psinhat(listdata2, funcname = funcname, nfolds = 2)
result = rbind(result, cbind(t(p1$n), t(p1$varn), "x"),
cbind(t(p1$n), t(p1$varn), "x*"))
}
set.seed(1234)
funcname = c("rangerlogit", "logit", "ranger", "gam")
result = numeric(0)
n = 5000
for(s in 1:100){
print(s)
ld = simuldata(n = n, l = 6, ep = -6)
listdata = ld$List_matrix
listdata2 = ld$List_matrix_xstar
p1 = psinhat(listdata, funcname = funcname, nfolds = 2)
p2 = psinhat(listdata2, funcname = funcname, nfolds = 2)
result = rbind(result, cbind(t(p1$n), t(p1$varn), "x"),
cbind(t(p1$n), t(p1$varn), "x*"))
}
result2 = cbind(rownames(result), result)
library(plyr)
library(tidyr)
library(dplyr)
library(ggplot2)
result2 = as.data.frame(result2)
colnames(result2) = c("Var1", "n", "varn", "covariate")
result2$n = as.numeric(as.character(result2$n))
result2$varn = as.numeric(as.character(result2$varn))
result2$biasn = result2$n - n
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)
result3 = ddply(result2, c("Var1", "covariate"), summarise,
bias = median(abs(biasn)),
rmse = sqrt(median(biasn^2 + varn)))
result3 = result3 %>% separate(Var1, c("model", "method"))
ggplot(result3 %>% filter(model != "rangerj"), aes(x = model, y = bias, fill = method)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~covariate) +
scale_fill_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9"))
head(result2)
summary(result2[result2$Var1 == "ranger.TMLE",])
result2 = na.omit(result2)
result3 = ddply(result2, c("Var1", "covariate"), summarise,
bias = median(abs(biasn)),
rmse = sqrt(median(biasn^2 + varn)))
result3 = result3 %>% separate(Var1, c("model", "method"))
ggplot(result3 %>% filter(model != "rangerj"), aes(x = model, y = bias, fill = method)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~covariate) +
scale_fill_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9"))
ggplot(result3 %>% filter(model != "rangerj"), aes(x = model, y = rmse, fill = method)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~covariate) +
scale_fill_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9"))
save(result, "C:/Users/manja/Downloads/drpopbarplots.Rdata")
save(result, file = "C:/Users/manja/Downloads/drpopbarplots.Rdata")
setwd("C:/Users/manja/OneDrive/Documents/Capture_Recapture")
load("data/peru_data/killing_barplot2_eps001_latlong_de_strataind_alldata.Rdata")
save(psiestim, psibarplot, file = paste0("data/peru_data/killing_barplot2_eps0", str_replace(paste0(eps), "0.", ''), "_latlong_de_strataind_alldata.Rdata"))
library(stringr)
save(psiestim, psibarplot, file = paste0("data/peru_data/killing_barplot2_eps0", str_replace(paste0(eps), "0.", ''), "_latlong_de_strataind_alldata.Rdata"))
eps = 0.01
save(psiestim, psibarplot, file = paste0("data/peru_data/killing_barplot2_eps0", str_replace(paste0(eps), "0.", ''), "_latlong_de_strataind_alldata.Rdata"))
load("data/peru_data/killing_barplot2_eps001_latlong_de_strataind_alldata.Rdata")
View(psibarplot)
colnames(psibarplot)
colnames(psibarplot)[9] = 'sdn'
colnames(psiestim)
colnames(psiestim)[9] = 'sdn'
save(psiestim, psibarplot, file = paste0("data/peru_data/killing_barplot2_eps0", str_replace(paste0(eps), "0.", ''), "_latlong_de_strataind_alldata.Rdata"))
library(ggmap)
library(ggplot2)
library(raster)
library(maptools)
library(maps)
library(viridis)
library(reshape2)
library(rayshader)
library(tidyverse)
library(dplyr)
library(sf)
peru = st_read("data/shape_files/DEPARTAMENTOS.shp", quiet = TRUE)
peru_reg = st_read("data/shape_files/REGIONS.shp", quiet = TRUE)
library(scales) #for trans_new
modulus_trans <- function(lambda){
trans_new("modulus",
transform = function(y){
if(lambda != 0){
yt <- sign(y) * (((abs(y) + 1) ^ lambda - 1) / lambda)
} else {
yt = sign(y) * (log(abs(y) + 1))
}
return(yt)
},
inverse = function(yt){
if(lambda != 0){
y <- ((abs(yt) * lambda + 1)  ^ (1 / lambda) - 1) * sign(yt)
} else {
y <- (exp(abs(yt)) - 1) * sign(yt)
}
return(y)
}
)
}
charcols = function(charvec, nrow){
return(matrix(rep(unlist(charvec), nrow), nrow = nrow, byrow = TRUE))
}
##############################################################################
###                  Joined departments
##############################################################################
load("data/peru_data/region_kills_for_map_eps001_strataind_alldata.Rdata")
slu_est_diff = output
slu_est_diff$diff = output[,'2'] - output[,'1']
slu_est_diff = slu_est_diff[c(1, 2, 5, 6, 3, 7, 4),]
peru_str = cbind(peru_reg, slu_est_diff$diff)
colnames(peru_str)[3] = "difference"
peru_str$difference = as.numeric(as.character(peru_str$difference))
#peru_str$model = factor(peru_str$model, levels = c('logit', 'ranger'))
#peru_str$method = factor(peru_str$method, levels = c("PI", "DR", "TMLE"))
#peru_str$method = revalue(peru_str$method, c("BC" = "DR"))
label_vec = c(round(min(slu_est_diff$diff, na.rm = TRUE)), -500, -100, -20, 0, 20, 100,  500, round(max(slu_est_diff$diff, na.rm = TRUE)))
gmodulus = ggplot(peru_str) +
geom_sf(aes(fill = difference)) +
theme_bw() +
scale_fill_gradient2(trans = #"identity",
modulus_trans(0.25),
# midpoint = 0,#zero,
low = "dodgerblue1",#"#56B4E9", ,
mid = "white",
high = "yellow2",#"#E69F00",# "#FFD700",#,#"goldenrod3"
space = "Lab",
limits = range(label_vec)+c(-1,1)
, breaks = label_vec, labels = label_vec
) +
#facet_grid(model~method) +
#facet_wrap(~method, labeller = as_labeller(c("PI"="Plug-in", "DR"="Doubly robust", "TMLE"="TMLE"))) +
ggtitle(NULL) +
#ggtitle("Difference in the estimated number of victims between the PCP-Shining Path and the State") +
#theme_bw() +
theme(text = element_text(size=12), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom", legend.key.width = unit(2.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
gmodulus
##############################################################################
###                  Individual departments
##############################################################################
load("data/peru_data/department_kills_for_map_eps001_strataind_alldata.Rdata")
slu_est_diffd = output
slu_est_diffd$diff = output[,'2'] - output[,'1']
peru_dep = cbind(peru, slu_est_diffd$diff)
colnames(peru_dep)[5] = "difference"
peru_dep$difference = as.numeric(as.character(peru_dep$difference))
label_vec = c(round(min(slu_est_diffd$diff, slu_est_diff$diff, na.rm = TRUE)), -500, -100, -20, 0, 20, 100,  500, round(max(slu_est_diffd$diff, slu_est_diff$diff, na.rm = TRUE)))
gmodulusd = ggplot(peru_dep) +
geom_sf(aes(fill = difference)) +
scale_fill_gradient2(trans = #"identity",
modulus_trans(0.25),
# midpoint = 0,#zero,
low = "dodgerblue1",#"#56B4E9", ,
mid = "white",
high = "yellow2",#"#E69F00",# "#FFD700",#,#"goldenrod3"
space = "Lab",
limits = c(min(label_vec)-1, max(label_vec)+1)
, breaks = label_vec, labels = label_vec
) +
ggtitle(NULL) +
#facet_grid(model~method) +
#facet_wrap(~method, labeller = as_labeller(c("PI"="Plug-in", "DR"="Doubly robust", "TMLE"="TMLE"))) +
#ggtitle("Difference in the estimated number of victims between the PCP-Shining Path and the State") +
theme_bw() +
theme(text = element_text(size=12), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
#plot.title = element_text(hjust = 0.5),
legend.position = "bottom", legend.key.width = unit(2.5, "cm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
gmodulusd
gmodulusd
g_depstr = ggarrange(gmodulusd + geom_text(x = -78, y = -18, label = "Departments"),
gmodulus + geom_text(x = -78, y = -18, label = "Regions"),
common.legend = TRUE, legend = "bottom")
g_dep_str = annotate_figure(g_depstr, top = text_grob("Difference in the estimated number of victims between the PCP-Shining Path and the State"))#, fig.lab = c("by department", "by region")
library(ggpubr)
g_depstr = ggarrange(gmodulusd + geom_text(x = -78, y = -18, label = "Departments"),
gmodulus + geom_text(x = -78, y = -18, label = "Regions"),
common.legend = TRUE, legend = "bottom")
g_dep_str = annotate_figure(g_depstr, top = text_grob("Difference in the estimated number of victims between the PCP-Shining Path and the State"))#, fig.lab = c("by department", "by region")
g_dep_str
pdf("C:/Users/manja/Dropbox/capture_recapture/codes/images/peru_kill_map/kill_slu_est_diff_ranger_1_23_eps001_strataind_dep_region_alldata.pdf", width = 7.89, height = 4.5)
g_dep_str
dev.off()
